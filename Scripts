# Packages
import pandas as pd                  # to create a DataFrame tableau 
import pandas_datareader.data as web # package that allows us to create a pandas DataFrame object by using various data sources from the internet.
import numpy as np                   # calcul scientifique 
import datetime as dt                # traiter les dates 
import matplotlib.pyplot as plt      # ajouter des éléments tels que des lignes, des images ou des textes aux axes d'un graphique
from matplotlib import style         # tracer et visualiser des données sous formes de graphiques.
style.use ('ggplot')                 # tracer des fonctions 
import os
import prophet                       # time series forecating 
import seaborn as sns                # Plot

# Déterminer l'emplacement de base
os.getcwd()

# Déterminer le chemin 
path="C:/Users/dell/Desktop/Nouveau dossier/MASTER 2021 2023/M2IFM/S2M2/stochastic model/"
os.chdir(path)
path

# Connaître le contenu de notre répertoire
os.listdir()

# Importer les Datasets
# load data
walfare= pd.read_csv("Walmare_data.csv",sep=";", decimal = ".",)
walfare.head(5)

# Traitement des informations
# Valeurs manquantes 
print(walfare.isnull().sum(axis=0))
# nombre de variables & traitement d'info
walfare.shape
# Le nombre de Store 
walfare["Store"].nunique()
# Identifier chaque store 
walfare.Store.unique()
# le nombre de département 
walfare["Dept"].nunique()
# le nombre de store par département
pd.crosstab(walfare["Store"],walfare["Dept"])
# Période d'étude 
walfare['Date'].head(5).append(walfare['Date'].tail(5)) # to see first and last 5 rows.
# Nous identifions ici les ventes par store et par département

Table_storedepart = pd.pivot_table(walfare, index='Store', columns='Dept',
                                  values='Weekly_Sales', aggfunc=np.mean)
Table_storedepart.head(5)

##  Visualisation des données
### Représentation Graphique des Ventes hebdomadaires par store
plt.figure(figsize=(14,6))
sns.barplot(x='Store', y='Weekly_Sales', data=walfare)
### Représentation graphique des Ventes hebdomadaires  en fonction des vacances 
plt.figure(figsize=(14,6))
sns.barplot(x='IsHoliday', y='Weekly_Sales', data=walfare)
### Représentation graphique des Ventes hebdomadaires  par mois
monthly_sales = pd.pivot_table(walfare, values = "Weekly_Sales", columns = "year", index = "month")
monthly_sales.plot()
plt.figure()
plt.figure(figsize=(14,6))
fig = sns.barplot(x='month', y='Weekly_Sales', data=walfare)

## PARTIE4 - CREATE TIME SERIES - Training a Prophet Time Series Model
frame = walfare.iloc[:,[2,3]]
frame.head(5)
frame.columns=['ds','y']
frame.head()
frame['ds'] = pd.to_datetime(frame['ds'])
frame.head()
frame.plot(x='ds', y='y', figsize=(18,6))
train = frame.iloc[: len(frame)-365]
test = frame.iloc[len(frame)-365]
from prophet import Prophet 
m = Prophet (interval_width = 0.95)
training_run = m.fit(frame)

## PARTIE5 : Making Predictions and evaluating Performance
future = m.make_future_dataframe(periods = 20, freq='D')
future.head(3)
forecast = m.predict(future)
forecast.tail()
forecast[['ds', 'yhat','yhat_lower', 'yhat_upper']].tail()
plotl = m.plot(forecast,  uncertainty=True)
plot2 = m.plot_components(forecast)
lines = walfare['Store'].unique()
lines
wal = walfare.iloc[:,[0,2,3]]
wal.head(5)

for stock_line in lines : 
    frame =walfare[walfare['Store']== stock_line].copy()
    print (frame.tail())

fit_models ={}
for stock_line in lines:
    frame =wal[wal['Store']== stock_line].copy()
    frame.drop('Store', axis=1, inplace=True)
    frame.columns = ['ds', 'y']
    
    m = Prophet (interval_width = 0.95)
    model = m.fit(frame)
    fit_models[stock_line] = m

forward = fit_models[1].make_future_dataframe(20)
forecast = fit_models[1].predict(forward)

### Plotting the forecasted components 
fig1 = m.plot_components(forecast)
### EVALUATION DU MODEL 
from statsmodels.tools.eval_measures import rmse
predictions = forecast.iloc[-365 :]['yhat']
print("racine moyenne quadratique Erreur entre les valeurs réelles et prédites", rmse (predictions, test['y']))
print ("Mean Value of Test Dataset:", test['y'].mean())

